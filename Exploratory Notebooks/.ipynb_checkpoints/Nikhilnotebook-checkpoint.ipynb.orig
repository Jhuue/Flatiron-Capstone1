{
 "cells": [
  {
<<<<<<< HEAD
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
=======
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## SQL Data cleaning and Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Import Necessary Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd \n",
    "import numpy as np\n",
    "import sqlite3\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Loading Data into Tables"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load Data set and read first one"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
>>>>>>> c82a862c06400c6b477c7baafa2d1550413e4ac8
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>movie_id</th>\n",
       "      <th>primary_title</th>\n",
       "      <th>original_title</th>\n",
       "      <th>start_year</th>\n",
       "      <th>runtime_minutes</th>\n",
       "      <th>genres</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tt0063540</td>\n",
       "      <td>Sunghursh</td>\n",
       "      <td>Sunghursh</td>\n",
       "      <td>2013</td>\n",
       "      <td>175.0</td>\n",
       "      <td>Action,Crime,Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>tt0066787</td>\n",
       "      <td>One Day Before the Rainy Season</td>\n",
       "      <td>Ashad Ka Ek Din</td>\n",
       "      <td>2019</td>\n",
       "      <td>114.0</td>\n",
       "      <td>Biography,Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>tt0069049</td>\n",
       "      <td>The Other Side of the Wind</td>\n",
       "      <td>The Other Side of the Wind</td>\n",
       "      <td>2018</td>\n",
       "      <td>122.0</td>\n",
       "      <td>Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>tt0069204</td>\n",
       "      <td>Sabse Bada Sukh</td>\n",
       "      <td>Sabse Bada Sukh</td>\n",
       "      <td>2018</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Comedy,Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>tt0100275</td>\n",
       "      <td>The Wandering Soap Opera</td>\n",
       "      <td>La Telenovela Errante</td>\n",
       "      <td>2017</td>\n",
       "      <td>80.0</td>\n",
       "      <td>Comedy,Drama,Fantasy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146139</th>\n",
       "      <td>tt9916538</td>\n",
       "      <td>Kuambil Lagi Hatiku</td>\n",
       "      <td>Kuambil Lagi Hatiku</td>\n",
       "      <td>2019</td>\n",
       "      <td>123.0</td>\n",
       "      <td>Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146140</th>\n",
       "      <td>tt9916622</td>\n",
       "      <td>Rodolpho Teóphilo - O Legado de um Pioneiro</td>\n",
       "      <td>Rodolpho Teóphilo - O Legado de um Pioneiro</td>\n",
       "      <td>2015</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Documentary</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146141</th>\n",
       "      <td>tt9916706</td>\n",
       "      <td>Dankyavar Danka</td>\n",
       "      <td>Dankyavar Danka</td>\n",
       "      <td>2013</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Comedy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146142</th>\n",
       "      <td>tt9916730</td>\n",
       "      <td>6 Gunn</td>\n",
       "      <td>6 Gunn</td>\n",
       "      <td>2017</td>\n",
       "      <td>116.0</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146143</th>\n",
       "      <td>tt9916754</td>\n",
       "      <td>Chico Albuquerque - Revelações</td>\n",
       "      <td>Chico Albuquerque - Revelações</td>\n",
       "      <td>2013</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Documentary</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>146144 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         movie_id                                primary_title  \\\n",
       "0       tt0063540                                    Sunghursh   \n",
       "1       tt0066787              One Day Before the Rainy Season   \n",
       "2       tt0069049                   The Other Side of the Wind   \n",
       "3       tt0069204                              Sabse Bada Sukh   \n",
       "4       tt0100275                     The Wandering Soap Opera   \n",
       "...           ...                                          ...   \n",
       "146139  tt9916538                          Kuambil Lagi Hatiku   \n",
       "146140  tt9916622  Rodolpho Teóphilo - O Legado de um Pioneiro   \n",
       "146141  tt9916706                              Dankyavar Danka   \n",
       "146142  tt9916730                                       6 Gunn   \n",
       "146143  tt9916754               Chico Albuquerque - Revelações   \n",
       "\n",
       "                                     original_title  start_year  \\\n",
       "0                                         Sunghursh        2013   \n",
       "1                                   Ashad Ka Ek Din        2019   \n",
       "2                        The Other Side of the Wind        2018   \n",
       "3                                   Sabse Bada Sukh        2018   \n",
       "4                             La Telenovela Errante        2017   \n",
       "...                                             ...         ...   \n",
       "146139                          Kuambil Lagi Hatiku        2019   \n",
       "146140  Rodolpho Teóphilo - O Legado de um Pioneiro        2015   \n",
       "146141                              Dankyavar Danka        2013   \n",
       "146142                                       6 Gunn        2017   \n",
       "146143               Chico Albuquerque - Revelações        2013   \n",
       "\n",
       "        runtime_minutes                genres  \n",
       "0                 175.0    Action,Crime,Drama  \n",
       "1                 114.0       Biography,Drama  \n",
       "2                 122.0                 Drama  \n",
       "3                   NaN          Comedy,Drama  \n",
       "4                  80.0  Comedy,Drama,Fantasy  \n",
       "...                 ...                   ...  \n",
       "146139            123.0                 Drama  \n",
       "146140              NaN           Documentary  \n",
       "146141              NaN                Comedy  \n",
       "146142            116.0                  None  \n",
       "146143              NaN           Documentary  \n",
       "\n",
       "[146144 rows x 6 columns]"
      ]
     },
<<<<<<< HEAD
     "execution_count": 1,
=======
     "execution_count": 2,
>>>>>>> c82a862c06400c6b477c7baafa2d1550413e4ac8
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
<<<<<<< HEAD
    "#import necessary Libraries\n",
    "import pandas as pd \n",
    "import numpy as np\n",
    "import sqlite3\n",
    "#sadsd=pd.read_csv('Data/bom.movie_gross.csv')\n",
    "#load data set\n",
    "conn = sqlite3.connect('Data/im.db')\n",
    "df3=pd.read_sql('Select * from movie_basics', conn)\n",
    "df3\n",
    "#genre_counts=pd.read_sql('Select Count (*) ,genres from movie_basics  Group By genres  Order By Count(genres) Limit 30; ', conn)\n",
    "\n",
    "#genres=['Documentary', 'Drama,Comedy','Horror','Thriller','Action','Bigoraphy','Romance' ,'Music','History','Family','Sport','Animation','Crime','Scifi','War']\n",
    "#genre\n",
    "#Documentary, Drama,Comedy,Horror,Thriller,Action,Bigoraphy,Romance ,Music,History,Family,Sport,Animation,Crime,Scifi\n"
=======
    "conn = sqlite3.connect('Data/im.db')\n",
    "df1=pd.read_sql('Select * from movie_basics', conn)\n",
    "df1\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load second data set and only take the number of votes greater than 25 because this can cause the rating to be skewed if only a few people had voted for it"
>>>>>>> c82a862c06400c6b477c7baafa2d1550413e4ac8
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
=======
   "execution_count": 3,
   "metadata": {
    "scrolled": false
   },
>>>>>>> c82a862c06400c6b477c7baafa2d1550413e4ac8
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>movie_id</th>\n",
       "      <th>averagerating</th>\n",
       "      <th>numvotes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tt10356526</td>\n",
       "      <td>8.3</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>tt10384606</td>\n",
       "      <td>8.9</td>\n",
       "      <td>559</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>tt1043726</td>\n",
       "      <td>4.2</td>\n",
       "      <td>50352</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>tt1069246</td>\n",
       "      <td>6.2</td>\n",
       "      <td>326</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>tt1094666</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1613</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45752</th>\n",
       "      <td>tt9633108</td>\n",
       "      <td>3.9</td>\n",
       "      <td>44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45753</th>\n",
       "      <td>tt9668598</td>\n",
       "      <td>5.5</td>\n",
       "      <td>317</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45754</th>\n",
       "      <td>tt9690762</td>\n",
       "      <td>5.6</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45755</th>\n",
       "      <td>tt9768966</td>\n",
       "      <td>8.6</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45756</th>\n",
       "      <td>tt9894098</td>\n",
       "      <td>6.3</td>\n",
       "      <td>128</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>45757 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         movie_id  averagerating  numvotes\n",
       "0      tt10356526            8.3        31\n",
       "1      tt10384606            8.9       559\n",
       "2       tt1043726            4.2     50352\n",
       "3       tt1069246            6.2       326\n",
       "4       tt1094666            7.0      1613\n",
       "...           ...            ...       ...\n",
       "45752   tt9633108            3.9        44\n",
       "45753   tt9668598            5.5       317\n",
       "45754   tt9690762            5.6        37\n",
       "45755   tt9768966            8.6        27\n",
       "45756   tt9894098            6.3       128\n",
       "\n",
       "[45757 rows x 3 columns]"
      ]
     },
<<<<<<< HEAD
     "execution_count": 2,
=======
     "execution_count": 3,
>>>>>>> c82a862c06400c6b477c7baafa2d1550413e4ac8
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2=pd.read_sql('Select * from movie_ratings Where numvotes>25', conn)\n",
    "df2"
   ]
  },
  {
<<<<<<< HEAD
   "cell_type": "code",
   "execution_count": 3,
=======
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load third and fourth data sets "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>movie_id</th>\n",
       "      <th>person_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tt0285252</td>\n",
       "      <td>nm0899854</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>tt0462036</td>\n",
       "      <td>nm1940585</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>tt0835418</td>\n",
       "      <td>nm0151540</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>tt0835418</td>\n",
       "      <td>nm0151540</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>tt0878654</td>\n",
       "      <td>nm0089502</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>291169</th>\n",
       "      <td>tt8999974</td>\n",
       "      <td>nm10122357</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>291170</th>\n",
       "      <td>tt9001390</td>\n",
       "      <td>nm6711477</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>291171</th>\n",
       "      <td>tt9001494</td>\n",
       "      <td>nm10123242</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>291172</th>\n",
       "      <td>tt9001494</td>\n",
       "      <td>nm10123248</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>291173</th>\n",
       "      <td>tt9004986</td>\n",
       "      <td>nm4993825</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>291174 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         movie_id   person_id\n",
       "0       tt0285252   nm0899854\n",
       "1       tt0462036   nm1940585\n",
       "2       tt0835418   nm0151540\n",
       "3       tt0835418   nm0151540\n",
       "4       tt0878654   nm0089502\n",
       "...           ...         ...\n",
       "291169  tt8999974  nm10122357\n",
       "291170  tt9001390   nm6711477\n",
       "291171  tt9001494  nm10123242\n",
       "291172  tt9001494  nm10123248\n",
       "291173  tt9004986   nm4993825\n",
       "\n",
       "[291174 rows x 2 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3=pd.read_sql('Select * from directors', conn)\n",
    "df3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>person_id</th>\n",
       "      <th>primary_name</th>\n",
       "      <th>birth_year</th>\n",
       "      <th>death_year</th>\n",
       "      <th>primary_profession</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nm0061671</td>\n",
       "      <td>Mary Ellen Bauder</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>miscellaneous,production_manager,producer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>nm0061865</td>\n",
       "      <td>Joseph Bauer</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>composer,music_department,sound_department</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>nm0062070</td>\n",
       "      <td>Bruce Baum</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>miscellaneous,actor,writer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>nm0062195</td>\n",
       "      <td>Axel Baumann</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>camera_department,cinematographer,art_department</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>nm0062798</td>\n",
       "      <td>Pete Baxter</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>production_designer,art_department,set_decorator</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>606643</th>\n",
       "      <td>nm9990381</td>\n",
       "      <td>Susan Grobes</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>actress</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>606644</th>\n",
       "      <td>nm9990690</td>\n",
       "      <td>Joo Yeon So</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>actress</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>606645</th>\n",
       "      <td>nm9991320</td>\n",
       "      <td>Madeline Smith</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>actress</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>606646</th>\n",
       "      <td>nm9991786</td>\n",
       "      <td>Michelle Modigliani</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>producer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>606647</th>\n",
       "      <td>nm9993380</td>\n",
       "      <td>Pegasus Envoyé</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>director,actor,writer</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>606648 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        person_id         primary_name  birth_year  death_year  \\\n",
       "0       nm0061671    Mary Ellen Bauder         NaN         NaN   \n",
       "1       nm0061865         Joseph Bauer         NaN         NaN   \n",
       "2       nm0062070           Bruce Baum         NaN         NaN   \n",
       "3       nm0062195         Axel Baumann         NaN         NaN   \n",
       "4       nm0062798          Pete Baxter         NaN         NaN   \n",
       "...           ...                  ...         ...         ...   \n",
       "606643  nm9990381         Susan Grobes         NaN         NaN   \n",
       "606644  nm9990690          Joo Yeon So         NaN         NaN   \n",
       "606645  nm9991320       Madeline Smith         NaN         NaN   \n",
       "606646  nm9991786  Michelle Modigliani         NaN         NaN   \n",
       "606647  nm9993380       Pegasus Envoyé         NaN         NaN   \n",
       "\n",
       "                                      primary_profession  \n",
       "0              miscellaneous,production_manager,producer  \n",
       "1             composer,music_department,sound_department  \n",
       "2                             miscellaneous,actor,writer  \n",
       "3       camera_department,cinematographer,art_department  \n",
       "4       production_designer,art_department,set_decorator  \n",
       "...                                                  ...  \n",
       "606643                                           actress  \n",
       "606644                                           actress  \n",
       "606645                                           actress  \n",
       "606646                                          producer  \n",
       "606647                             director,actor,writer  \n",
       "\n",
       "[606648 rows x 5 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4=pd.read_sql('Select * from persons', conn)\n",
    "df4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Join tables to get necessary values and query on number of votes greater than 100 so that we can get accurate ratings and Runtime <400 because there were outliers in the thousands and almost all box office hits are below this figure"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
>>>>>>> c82a862c06400c6b477c7baafa2d1550413e4ac8
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>movie_id</th>\n",
       "      <th>primary_title</th>\n",
       "      <th>original_title</th>\n",
       "      <th>start_year</th>\n",
       "      <th>runtime_minutes</th>\n",
       "      <th>genres</th>\n",
       "      <th>averagerating</th>\n",
       "      <th>numvotes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
<<<<<<< HEAD
       "      <td>tt1608246</td>\n",
       "      <td>Therapissed</td>\n",
       "      <td>Therapissed</td>\n",
       "      <td>2010</td>\n",
       "      <td>76.0</td>\n",
       "      <td>Comedy</td>\n",
       "      <td>8.0</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>tt6547822</td>\n",
       "      <td>Bloody Murder</td>\n",
       "      <td>Bloody Murder</td>\n",
       "      <td>2017</td>\n",
       "      <td>70.0</td>\n",
       "      <td>Thriller</td>\n",
       "      <td>3.7</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>tt7024660</td>\n",
       "      <td>Good Morning Pakistan</td>\n",
       "      <td>Salam Pakistan</td>\n",
       "      <td>2018</td>\n",
       "      <td>120.0</td>\n",
       "      <td>Comedy,Mystery,Romance</td>\n",
       "      <td>8.1</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>tt7293844</td>\n",
       "      <td>Los Corroboradores</td>\n",
       "      <td>Los Corroboradores</td>\n",
       "      <td>2017</td>\n",
       "      <td>70.0</td>\n",
       "      <td>None</td>\n",
       "      <td>7.2</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>tt7460834</td>\n",
       "      <td>With Love, Delhi!</td>\n",
       "      <td>With Love, Delhi!</td>\n",
       "      <td>2011</td>\n",
       "      <td>97.0</td>\n",
       "      <td>Thriller</td>\n",
       "      <td>7.9</td>\n",
       "      <td>26</td>\n",
=======
       "      <td>tt1311083</td>\n",
       "      <td>Rat Scratch Fever</td>\n",
       "      <td>Rat Scratch Fever</td>\n",
       "      <td>2011</td>\n",
       "      <td>90.0</td>\n",
       "      <td>Horror,Sci-Fi</td>\n",
       "      <td>4.9</td>\n",
       "      <td>101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>tt1547089</td>\n",
       "      <td>A Yakuza's Daughter Never Cries</td>\n",
       "      <td>Doch yakudzy</td>\n",
       "      <td>2010</td>\n",
       "      <td>81.0</td>\n",
       "      <td>Comedy</td>\n",
       "      <td>5.1</td>\n",
       "      <td>101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>tt1652295</td>\n",
       "      <td>Alien Inhabitant</td>\n",
       "      <td>Alien Inhabitant</td>\n",
       "      <td>2011</td>\n",
       "      <td>90.0</td>\n",
       "      <td>Crime,Drama,Fantasy</td>\n",
       "      <td>4.4</td>\n",
       "      <td>101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>tt1698653</td>\n",
       "      <td>Me &amp; Mr Jones, a love story on Natalee-island</td>\n",
       "      <td>Me and Mr Jones on Natalee-Island</td>\n",
       "      <td>2011</td>\n",
       "      <td>88.0</td>\n",
       "      <td>Crime,Drama,Mystery</td>\n",
       "      <td>3.5</td>\n",
       "      <td>101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>tt1711475</td>\n",
       "      <td>The Jade and the Pearl</td>\n",
       "      <td>Fei cui ming zhu</td>\n",
       "      <td>2010</td>\n",
       "      <td>104.0</td>\n",
       "      <td>Comedy,Romance</td>\n",
       "      <td>4.2</td>\n",
       "      <td>101</td>\n",
>>>>>>> c82a862c06400c6b477c7baafa2d1550413e4ac8
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
<<<<<<< HEAD
       "      <th>45752</th>\n",
=======
       "      <th>27866</th>\n",
>>>>>>> c82a862c06400c6b477c7baafa2d1550413e4ac8
       "      <td>tt0848228</td>\n",
       "      <td>The Avengers</td>\n",
       "      <td>The Avengers</td>\n",
       "      <td>2012</td>\n",
       "      <td>143.0</td>\n",
       "      <td>Action,Adventure,Sci-Fi</td>\n",
       "      <td>8.1</td>\n",
       "      <td>1183655</td>\n",
       "    </tr>\n",
       "    <tr>\n",
<<<<<<< HEAD
       "      <th>45753</th>\n",
=======
       "      <th>27867</th>\n",
>>>>>>> c82a862c06400c6b477c7baafa2d1550413e4ac8
       "      <td>tt1853728</td>\n",
       "      <td>Django Unchained</td>\n",
       "      <td>Django Unchained</td>\n",
       "      <td>2012</td>\n",
       "      <td>165.0</td>\n",
       "      <td>Drama,Western</td>\n",
       "      <td>8.4</td>\n",
       "      <td>1211405</td>\n",
       "    </tr>\n",
       "    <tr>\n",
<<<<<<< HEAD
       "      <th>45754</th>\n",
=======
       "      <th>27868</th>\n",
>>>>>>> c82a862c06400c6b477c7baafa2d1550413e4ac8
       "      <td>tt0816692</td>\n",
       "      <td>Interstellar</td>\n",
       "      <td>Interstellar</td>\n",
       "      <td>2014</td>\n",
       "      <td>169.0</td>\n",
       "      <td>Adventure,Drama,Sci-Fi</td>\n",
       "      <td>8.6</td>\n",
       "      <td>1299334</td>\n",
       "    </tr>\n",
       "    <tr>\n",
<<<<<<< HEAD
       "      <th>45755</th>\n",
=======
       "      <th>27869</th>\n",
>>>>>>> c82a862c06400c6b477c7baafa2d1550413e4ac8
       "      <td>tt1345836</td>\n",
       "      <td>The Dark Knight Rises</td>\n",
       "      <td>The Dark Knight Rises</td>\n",
       "      <td>2012</td>\n",
       "      <td>164.0</td>\n",
       "      <td>Action,Thriller</td>\n",
       "      <td>8.4</td>\n",
       "      <td>1387769</td>\n",
       "    </tr>\n",
       "    <tr>\n",
<<<<<<< HEAD
       "      <th>45756</th>\n",
=======
       "      <th>27870</th>\n",
>>>>>>> c82a862c06400c6b477c7baafa2d1550413e4ac8
       "      <td>tt1375666</td>\n",
       "      <td>Inception</td>\n",
       "      <td>Inception</td>\n",
       "      <td>2010</td>\n",
       "      <td>148.0</td>\n",
       "      <td>Action,Adventure,Sci-Fi</td>\n",
       "      <td>8.8</td>\n",
       "      <td>1841066</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
<<<<<<< HEAD
       "<p>45757 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        movie_id          primary_title         original_title  start_year  \\\n",
       "0      tt1608246            Therapissed            Therapissed        2010   \n",
       "1      tt6547822          Bloody Murder          Bloody Murder        2017   \n",
       "2      tt7024660  Good Morning Pakistan         Salam Pakistan        2018   \n",
       "3      tt7293844     Los Corroboradores     Los Corroboradores        2017   \n",
       "4      tt7460834      With Love, Delhi!      With Love, Delhi!        2011   \n",
       "...          ...                    ...                    ...         ...   \n",
       "45752  tt0848228           The Avengers           The Avengers        2012   \n",
       "45753  tt1853728       Django Unchained       Django Unchained        2012   \n",
       "45754  tt0816692           Interstellar           Interstellar        2014   \n",
       "45755  tt1345836  The Dark Knight Rises  The Dark Knight Rises        2012   \n",
       "45756  tt1375666              Inception              Inception        2010   \n",
       "\n",
       "       runtime_minutes                   genres  averagerating  numvotes  \n",
       "0                 76.0                   Comedy            8.0        26  \n",
       "1                 70.0                 Thriller            3.7        26  \n",
       "2                120.0   Comedy,Mystery,Romance            8.1        26  \n",
       "3                 70.0                     None            7.2        26  \n",
       "4                 97.0                 Thriller            7.9        26  \n",
       "...                ...                      ...            ...       ...  \n",
       "45752            143.0  Action,Adventure,Sci-Fi            8.1   1183655  \n",
       "45753            165.0            Drama,Western            8.4   1211405  \n",
       "45754            169.0   Adventure,Drama,Sci-Fi            8.6   1299334  \n",
       "45755            164.0          Action,Thriller            8.4   1387769  \n",
       "45756            148.0  Action,Adventure,Sci-Fi            8.8   1841066  \n",
       "\n",
       "[45757 rows x 8 columns]"
      ]
     },
     "execution_count": 3,
=======
       "<p>27871 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        movie_id                                  primary_title  \\\n",
       "0      tt1311083                              Rat Scratch Fever   \n",
       "1      tt1547089                A Yakuza's Daughter Never Cries   \n",
       "2      tt1652295                               Alien Inhabitant   \n",
       "3      tt1698653  Me & Mr Jones, a love story on Natalee-island   \n",
       "4      tt1711475                         The Jade and the Pearl   \n",
       "...          ...                                            ...   \n",
       "27866  tt0848228                                   The Avengers   \n",
       "27867  tt1853728                               Django Unchained   \n",
       "27868  tt0816692                                   Interstellar   \n",
       "27869  tt1345836                          The Dark Knight Rises   \n",
       "27870  tt1375666                                      Inception   \n",
       "\n",
       "                          original_title  start_year  runtime_minutes  \\\n",
       "0                      Rat Scratch Fever        2011             90.0   \n",
       "1                           Doch yakudzy        2010             81.0   \n",
       "2                       Alien Inhabitant        2011             90.0   \n",
       "3      Me and Mr Jones on Natalee-Island        2011             88.0   \n",
       "4                       Fei cui ming zhu        2010            104.0   \n",
       "...                                  ...         ...              ...   \n",
       "27866                       The Avengers        2012            143.0   \n",
       "27867                   Django Unchained        2012            165.0   \n",
       "27868                       Interstellar        2014            169.0   \n",
       "27869              The Dark Knight Rises        2012            164.0   \n",
       "27870                          Inception        2010            148.0   \n",
       "\n",
       "                        genres  averagerating  numvotes  \n",
       "0                Horror,Sci-Fi            4.9       101  \n",
       "1                       Comedy            5.1       101  \n",
       "2          Crime,Drama,Fantasy            4.4       101  \n",
       "3          Crime,Drama,Mystery            3.5       101  \n",
       "4               Comedy,Romance            4.2       101  \n",
       "...                        ...            ...       ...  \n",
       "27866  Action,Adventure,Sci-Fi            8.1   1183655  \n",
       "27867            Drama,Western            8.4   1211405  \n",
       "27868   Adventure,Drama,Sci-Fi            8.6   1299334  \n",
       "27869          Action,Thriller            8.4   1387769  \n",
       "27870  Action,Adventure,Sci-Fi            8.8   1841066  \n",
       "\n",
       "[27871 rows x 8 columns]"
      ]
     },
     "execution_count": 6,
>>>>>>> c82a862c06400c6b477c7baafa2d1550413e4ac8
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
<<<<<<< HEAD
    "df=pd.read_sql('Select movie_basics.movie_id,movie_basics.primary_title,movie_basics.original_title,movie_basics.start_year,movie_basics.runtime_minutes,movie_basics.genres,movie_ratings.averagerating,movie_ratings.numvotes from movie_basics join movie_ratings Using(movie_id)  Where numvotes>25 Order By numvotes', conn)\n",
=======
    "df=pd.read_sql('Select movie_basics.movie_id,movie_basics.primary_title,movie_basics.original_title,movie_basics.start_year,movie_basics.runtime_minutes,movie_basics.genres,movie_ratings.averagerating,movie_ratings.numvotes from movie_basics join movie_ratings Using(movie_id) Where numvotes>100 AND runtime_minutes<400 Order By numvotes', conn)\n",
>>>>>>> c82a862c06400c6b477c7baafa2d1550413e4ac8
    "df"
   ]
  },
  {
<<<<<<< HEAD
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
=======
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create another df to get just the directors and how well the directors movies did. Made sure that the director had a minimum of 10 movies made to ensure that they had a large enough sample size. Join on persons to get director name,join on movie_ratings to get average score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": false
>>>>>>> c82a862c06400c6b477c7baafa2d1550413e4ac8
   },
   "outputs": [
    {
     "data": {
<<<<<<< HEAD
      "text/plain": [
       "90.0       3085\n",
       "100.0      1458\n",
       "95.0       1404\n",
       "85.0       1346\n",
       "80.0       1240\n",
       "           ... \n",
       "278.0         1\n",
       "231.0         1\n",
       "808.0         1\n",
       "205.0         1\n",
       "14400.0       1\n",
       "Name: runtime_minutes, Length: 244, dtype: int64"
      ]
     },
     "execution_count": 4,
=======
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>movie_id</th>\n",
       "      <th>movie_num</th>\n",
       "      <th>director_id</th>\n",
       "      <th>avg_rating</th>\n",
       "      <th>name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tt6588024</td>\n",
       "      <td>217</td>\n",
       "      <td>nm6935209</td>\n",
       "      <td>5.131336</td>\n",
       "      <td>Tony Newton</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>tt7583042</td>\n",
       "      <td>180</td>\n",
       "      <td>nm2563700</td>\n",
       "      <td>5.339444</td>\n",
       "      <td>Jason Impey</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>tt4050462</td>\n",
       "      <td>177</td>\n",
       "      <td>nm1546474</td>\n",
       "      <td>5.498305</td>\n",
       "      <td>Shane Ryan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>tt4050462</td>\n",
       "      <td>150</td>\n",
       "      <td>nm3877467</td>\n",
       "      <td>5.854000</td>\n",
       "      <td>Ruben Rodriguez</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>tt3334746</td>\n",
       "      <td>135</td>\n",
       "      <td>nm6078996</td>\n",
       "      <td>5.548889</td>\n",
       "      <td>Martin Sonntag</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2497</th>\n",
       "      <td>tt1399103</td>\n",
       "      <td>11</td>\n",
       "      <td>nm0000881</td>\n",
       "      <td>6.045455</td>\n",
       "      <td>Michael Bay</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2498</th>\n",
       "      <td>tt1234654</td>\n",
       "      <td>11</td>\n",
       "      <td>nm0000876</td>\n",
       "      <td>6.690909</td>\n",
       "      <td>Noah Baumbach</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2499</th>\n",
       "      <td>tt4459156</td>\n",
       "      <td>11</td>\n",
       "      <td>nm0000806</td>\n",
       "      <td>6.818182</td>\n",
       "      <td>Bille August</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2500</th>\n",
       "      <td>tt2406252</td>\n",
       "      <td>11</td>\n",
       "      <td>nm0000591</td>\n",
       "      <td>6.790909</td>\n",
       "      <td>Roman Polanski</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2501</th>\n",
       "      <td>tt1124035</td>\n",
       "      <td>11</td>\n",
       "      <td>nm0000123</td>\n",
       "      <td>6.190909</td>\n",
       "      <td>George Clooney</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2502 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       movie_id  movie_num director_id  avg_rating             name\n",
       "0     tt6588024        217   nm6935209    5.131336      Tony Newton\n",
       "1     tt7583042        180   nm2563700    5.339444      Jason Impey\n",
       "2     tt4050462        177   nm1546474    5.498305       Shane Ryan\n",
       "3     tt4050462        150   nm3877467    5.854000  Ruben Rodriguez\n",
       "4     tt3334746        135   nm6078996    5.548889   Martin Sonntag\n",
       "...         ...        ...         ...         ...              ...\n",
       "2497  tt1399103         11   nm0000881    6.045455      Michael Bay\n",
       "2498  tt1234654         11   nm0000876    6.690909    Noah Baumbach\n",
       "2499  tt4459156         11   nm0000806    6.818182     Bille August\n",
       "2500  tt2406252         11   nm0000591    6.790909   Roman Polanski\n",
       "2501  tt1124035         11   nm0000123    6.190909   George Clooney\n",
       "\n",
       "[2502 rows x 5 columns]"
      ]
     },
     "execution_count": 7,
>>>>>>> c82a862c06400c6b477c7baafa2d1550413e4ac8
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
<<<<<<< HEAD
    "df['genres'] = df['genres'].fillna(value='None')\n",
    "df.isna().any()\n",
    "len(df[df.runtime_minutes.isna()])/ len(df)\n",
    "df['original_title'] = df['original_title'].fillna(value=df['primary_title'])\n",
    "df[\"genres\"].value_counts()\n",
    "df[\"original_title\"].value_counts()\n",
    "df[\"primary_title\"].value_counts()\n",
    "df[\"runtime_minutes\"].value_counts()"
=======
    "#df_directors=pd.read_sql('Select DISTINCT directors.movie_id,directors.person_id as director_id,movie_basics.primary_title,movie_basics.original_title,movie_basics.start_year,movie_basics.runtime_minutes,movie_basics.genres,movie_ratings.averagerating,movie_ratings.numvotes from movie_basics join movie_ratings Using(movie_id) join directors Using(movie_id) Where numvotes>100 AND runtime_minutes<400 Order By numvotes', conn)\n",
    "#df_directors\n",
<<<<<<< HEAD
    "df_directors=pd.read_sql('Select DISTINCT directors.movie_id,Count(*) as movie_num,directors.person_id as director_id,AVG(movie_ratings.averagerating) as avg_rating from movie_ratings join directors Using(movie_id) Group By director_id Having movie_num > 10 Order By movie_num DESC ', conn)\n",
    "df_directors\n"
>>>>>>> c82a862c06400c6b477c7baafa2d1550413e4ac8
=======
    "#df_directors=pd.read_sql('Select DISTINCT directors.movie_id,Count(*) as movie_num,directors.person_id as director_id,AVG(movie_ratings.averagerating) as avg_rating from movie_ratings join directors Using(movie_id) Group By director_id Having movie_num > 10 Order By movie_num DESC ', conn)\n",
    "\n",
    "df_directors=pd.read_sql('Select DISTINCT directors.movie_id,Count(*) as movie_num,directors.person_id as director_id,AVG(movie_ratings.averagerating) as avg_rating, persons.primary_name as name from directors join persons on persons.person_id=directors.person_id join movie_ratings Using(movie_id) Group By director_id Having movie_num > 10 Order By movie_num DESC ', conn)\n",
    "df_directors\n",
    "\n"
>>>>>>> 9bb15ab84deefc8ce6743b9340e059be531204a4
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 5,
=======
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2502 entries, 0 to 2501\n",
      "Data columns (total 5 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   movie_id     2502 non-null   object \n",
      " 1   movie_num    2502 non-null   int64  \n",
      " 2   director_id  2502 non-null   object \n",
      " 3   avg_rating   2502 non-null   float64\n",
      " 4   name         2502 non-null   object \n",
      "dtypes: float64(1), int64(1), object(3)\n",
      "memory usage: 97.9+ KB\n"
     ]
    }
   ],
   "source": [
    "df_directors.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create another df of directors with smaller sample just for visualization purposes and to see who the top 10 are. Made sure to order by avg_rating and to limit it to 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>movie_id</th>\n",
       "      <th>movie_num</th>\n",
       "      <th>director_id</th>\n",
       "      <th>avg_rating</th>\n",
       "      <th>name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tt3488354</td>\n",
       "      <td>12</td>\n",
       "      <td>nm5083382</td>\n",
       "      <td>9.100000</td>\n",
       "      <td>Corey Lubowich</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>tt3428990</td>\n",
       "      <td>28</td>\n",
       "      <td>nm6179119</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>Dennis Korbylo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>tt3428990</td>\n",
       "      <td>28</td>\n",
       "      <td>nm6179118</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>Erin Korbylo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>tt3428990</td>\n",
       "      <td>28</td>\n",
       "      <td>nm6179115</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>Sylvia Broeckx</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>tt1493812</td>\n",
       "      <td>17</td>\n",
       "      <td>nm0331653</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>Lisa Gossels</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>tt7294234</td>\n",
       "      <td>14</td>\n",
       "      <td>nm6230910</td>\n",
       "      <td>8.671429</td>\n",
       "      <td>Elizabeth Blake-Thomas</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>tt10045072</td>\n",
       "      <td>11</td>\n",
       "      <td>nm2223858</td>\n",
       "      <td>8.654545</td>\n",
       "      <td>Steve Ravic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>tt1894458</td>\n",
       "      <td>12</td>\n",
       "      <td>nm3025186</td>\n",
       "      <td>8.566667</td>\n",
       "      <td>Jason Reid</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>tt2233762</td>\n",
       "      <td>11</td>\n",
       "      <td>nm2019600</td>\n",
       "      <td>8.527273</td>\n",
       "      <td>Mahdi Fleifel</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>tt8628960</td>\n",
       "      <td>11</td>\n",
       "      <td>nm1202346</td>\n",
       "      <td>8.418182</td>\n",
       "      <td>Damir Cucic</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     movie_id  movie_num director_id  avg_rating                    name\n",
       "0   tt3488354         12   nm5083382    9.100000          Corey Lubowich\n",
       "1   tt3428990         28   nm6179119    9.000000          Dennis Korbylo\n",
       "2   tt3428990         28   nm6179118    9.000000            Erin Korbylo\n",
       "3   tt3428990         28   nm6179115    9.000000          Sylvia Broeckx\n",
       "4   tt1493812         17   nm0331653    9.000000            Lisa Gossels\n",
       "5   tt7294234         14   nm6230910    8.671429  Elizabeth Blake-Thomas\n",
       "6  tt10045072         11   nm2223858    8.654545             Steve Ravic\n",
       "7   tt1894458         12   nm3025186    8.566667              Jason Reid\n",
       "8   tt2233762         11   nm2019600    8.527273           Mahdi Fleifel\n",
       "9   tt8628960         11   nm1202346    8.418182             Damir Cucic"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_directors2=pd.read_sql('Select DISTINCT directors.movie_id,Count(*) as movie_num,directors.person_id as director_id,AVG(movie_ratings.averagerating) as avg_rating, persons.primary_name as name from directors join persons on persons.person_id=directors.person_id join movie_ratings Using(movie_id) Group By director_id Having movie_num > 10 Order By avg_rating DESC Limit 10 ', conn)\n",
    "df_directors2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Clean Data/Data manipulation and deal with Null values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Change float value to an int"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>movie_id</th>\n",
       "      <th>movie_num</th>\n",
       "      <th>director_id</th>\n",
       "      <th>avg_rating</th>\n",
       "      <th>name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tt6588024</td>\n",
       "      <td>217</td>\n",
       "      <td>nm6935209</td>\n",
       "      <td>5</td>\n",
       "      <td>Tony Newton</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>tt7583042</td>\n",
       "      <td>180</td>\n",
       "      <td>nm2563700</td>\n",
       "      <td>5</td>\n",
       "      <td>Jason Impey</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>tt4050462</td>\n",
       "      <td>177</td>\n",
       "      <td>nm1546474</td>\n",
       "      <td>5</td>\n",
       "      <td>Shane Ryan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>tt4050462</td>\n",
       "      <td>150</td>\n",
       "      <td>nm3877467</td>\n",
       "      <td>5</td>\n",
       "      <td>Ruben Rodriguez</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>tt3334746</td>\n",
       "      <td>135</td>\n",
       "      <td>nm6078996</td>\n",
       "      <td>5</td>\n",
       "      <td>Martin Sonntag</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2497</th>\n",
       "      <td>tt1399103</td>\n",
       "      <td>11</td>\n",
       "      <td>nm0000881</td>\n",
       "      <td>6</td>\n",
       "      <td>Michael Bay</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2498</th>\n",
       "      <td>tt1234654</td>\n",
       "      <td>11</td>\n",
       "      <td>nm0000876</td>\n",
       "      <td>6</td>\n",
       "      <td>Noah Baumbach</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2499</th>\n",
       "      <td>tt4459156</td>\n",
       "      <td>11</td>\n",
       "      <td>nm0000806</td>\n",
       "      <td>6</td>\n",
       "      <td>Bille August</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2500</th>\n",
       "      <td>tt2406252</td>\n",
       "      <td>11</td>\n",
       "      <td>nm0000591</td>\n",
       "      <td>6</td>\n",
       "      <td>Roman Polanski</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2501</th>\n",
       "      <td>tt1124035</td>\n",
       "      <td>11</td>\n",
       "      <td>nm0000123</td>\n",
       "      <td>6</td>\n",
       "      <td>George Clooney</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2502 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       movie_id  movie_num director_id  avg_rating             name\n",
       "0     tt6588024        217   nm6935209           5      Tony Newton\n",
       "1     tt7583042        180   nm2563700           5      Jason Impey\n",
       "2     tt4050462        177   nm1546474           5       Shane Ryan\n",
       "3     tt4050462        150   nm3877467           5  Ruben Rodriguez\n",
       "4     tt3334746        135   nm6078996           5   Martin Sonntag\n",
       "...         ...        ...         ...         ...              ...\n",
       "2497  tt1399103         11   nm0000881           6      Michael Bay\n",
       "2498  tt1234654         11   nm0000876           6    Noah Baumbach\n",
       "2499  tt4459156         11   nm0000806           6     Bille August\n",
       "2500  tt2406252         11   nm0000591           6   Roman Polanski\n",
       "2501  tt1124035         11   nm0000123           6   George Clooney\n",
       "\n",
       "[2502 rows x 5 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "df_directors['avg_rating']=df_directors.avg_rating.astype(int)\n",
    "df_directors"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create a duplicate table for directors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "temp=pd.DataFrame()\n",
    "temp['director_id']=df_directors['director_id']\n",
    "temp['rating']=df_directors['avg_rating']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Check to see if any values are Null"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
>>>>>>> c82a862c06400c6b477c7baafa2d1550413e4ac8
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "movie_id           False\n",
       "primary_title      False\n",
       "original_title     False\n",
       "start_year         False\n",
<<<<<<< HEAD
       "runtime_minutes     True\n",
       "genres             False\n",
=======
       "runtime_minutes    False\n",
       "genres              True\n",
>>>>>>> c82a862c06400c6b477c7baafa2d1550413e4ac8
       "averagerating      False\n",
       "numvotes           False\n",
       "dtype: bool"
      ]
     },
<<<<<<< HEAD
     "execution_count": 5,
=======
     "execution_count": 12,
>>>>>>> c82a862c06400c6b477c7baafa2d1550413e4ac8
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().any()"
   ]
  },
  {
<<<<<<< HEAD
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "g=[]\n",
    "j=[]\n",
    "count=0\n",
    "for i in df['genres']:\n",
    "    j=i.split(',')\n",
    "    g.append(j)\n",
    "df['genres']=g"
=======
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Check to see what percent of the values are null to understand how to handle missing data"
>>>>>>> c82a862c06400c6b477c7baafa2d1550413e4ac8
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 37,
=======
   "execution_count": 13,
>>>>>>> c82a862c06400c6b477c7baafa2d1550413e4ac8
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
<<<<<<< HEAD
       "0.0"
      ]
     },
     "execution_count": 37,
=======
       "0.0004664346453302716"
      ]
     },
     "execution_count": 13,
>>>>>>> c82a862c06400c6b477c7baafa2d1550413e4ac8
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
<<<<<<< HEAD
    "#check to see what values are null\n",
    "df.isna().any()\n",
    "len(df[df.runtime_minutes.isna()])/ len(df)\n",
    "#20% of movies do not have runtime listed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
=======
    "len(df[df.runtime_minutes.isna()])/ len(df)\n",
    "len(df[df.genres.isna()])/ len(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Fill null in genres tables and check again"
>>>>>>> c82a862c06400c6b477c7baafa2d1550413e4ac8
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "genres_list=['Documentary', 'Drama','Comedy','Horror','Thriller','Action','Bigoraphy','Romance' ,'Music','History','Family','Sport','Animation','Crime','Sci-Fi','War','Mystery']\n",
    "genres_list2=['Comedy','Action','Adventure']\n",
    "\n",
    "for gl in genres_list:\n",
    "    g3=[]\n",
    "    for h in df['genres']:\n",
    "        if gl in h:\n",
    "            g3.append(True)\n",
    "        else:\n",
    "            g3.append(False)\n",
    "    df[gl]=g3\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>movie_id</th>\n",
       "      <th>primary_title</th>\n",
       "      <th>original_title</th>\n",
       "      <th>start_year</th>\n",
       "      <th>runtime_minutes</th>\n",
       "      <th>genres</th>\n",
       "      <th>averagerating</th>\n",
       "      <th>numvotes</th>\n",
       "      <th>Documentary</th>\n",
       "      <th>Drama</th>\n",
       "      <th>...</th>\n",
       "      <th>Romance</th>\n",
       "      <th>Music</th>\n",
       "      <th>History</th>\n",
       "      <th>Family</th>\n",
       "      <th>Sport</th>\n",
       "      <th>Animation</th>\n",
       "      <th>Crime</th>\n",
       "      <th>Sci-Fi</th>\n",
       "      <th>War</th>\n",
       "      <th>Mystery</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tt1608246</td>\n",
       "      <td>Therapissed</td>\n",
       "      <td>Therapissed</td>\n",
       "      <td>2010</td>\n",
       "      <td>76.0</td>\n",
       "      <td>[Comedy]</td>\n",
       "      <td>8.0</td>\n",
       "      <td>26</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>tt6547822</td>\n",
       "      <td>Bloody Murder</td>\n",
       "      <td>Bloody Murder</td>\n",
       "      <td>2017</td>\n",
       "      <td>70.0</td>\n",
       "      <td>[Thriller]</td>\n",
       "      <td>3.7</td>\n",
       "      <td>26</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>tt7024660</td>\n",
       "      <td>Good Morning Pakistan</td>\n",
       "      <td>Salam Pakistan</td>\n",
       "      <td>2018</td>\n",
       "      <td>120.0</td>\n",
       "      <td>[Comedy, Mystery, Romance]</td>\n",
       "      <td>8.1</td>\n",
       "      <td>26</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>tt7293844</td>\n",
       "      <td>Los Corroboradores</td>\n",
       "      <td>Los Corroboradores</td>\n",
       "      <td>2017</td>\n",
       "      <td>70.0</td>\n",
       "      <td>[None]</td>\n",
       "      <td>7.2</td>\n",
       "      <td>26</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>tt7460834</td>\n",
       "      <td>With Love, Delhi!</td>\n",
       "      <td>With Love, Delhi!</td>\n",
       "      <td>2011</td>\n",
       "      <td>97.0</td>\n",
       "      <td>[Thriller]</td>\n",
       "      <td>7.9</td>\n",
       "      <td>26</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45752</th>\n",
       "      <td>tt0848228</td>\n",
       "      <td>The Avengers</td>\n",
       "      <td>The Avengers</td>\n",
       "      <td>2012</td>\n",
       "      <td>143.0</td>\n",
       "      <td>[Action, Adventure, Sci-Fi]</td>\n",
       "      <td>8.1</td>\n",
       "      <td>1183655</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45753</th>\n",
       "      <td>tt1853728</td>\n",
       "      <td>Django Unchained</td>\n",
       "      <td>Django Unchained</td>\n",
       "      <td>2012</td>\n",
       "      <td>165.0</td>\n",
       "      <td>[Drama, Western]</td>\n",
       "      <td>8.4</td>\n",
       "      <td>1211405</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45754</th>\n",
       "      <td>tt0816692</td>\n",
       "      <td>Interstellar</td>\n",
       "      <td>Interstellar</td>\n",
       "      <td>2014</td>\n",
       "      <td>169.0</td>\n",
       "      <td>[Adventure, Drama, Sci-Fi]</td>\n",
       "      <td>8.6</td>\n",
       "      <td>1299334</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45755</th>\n",
       "      <td>tt1345836</td>\n",
       "      <td>The Dark Knight Rises</td>\n",
       "      <td>The Dark Knight Rises</td>\n",
       "      <td>2012</td>\n",
       "      <td>164.0</td>\n",
       "      <td>[Action, Thriller]</td>\n",
       "      <td>8.4</td>\n",
       "      <td>1387769</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45756</th>\n",
       "      <td>tt1375666</td>\n",
       "      <td>Inception</td>\n",
       "      <td>Inception</td>\n",
       "      <td>2010</td>\n",
       "      <td>148.0</td>\n",
       "      <td>[Action, Adventure, Sci-Fi]</td>\n",
       "      <td>8.8</td>\n",
       "      <td>1841066</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>45757 rows × 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        movie_id          primary_title         original_title  start_year  \\\n",
       "0      tt1608246            Therapissed            Therapissed        2010   \n",
       "1      tt6547822          Bloody Murder          Bloody Murder        2017   \n",
       "2      tt7024660  Good Morning Pakistan         Salam Pakistan        2018   \n",
       "3      tt7293844     Los Corroboradores     Los Corroboradores        2017   \n",
       "4      tt7460834      With Love, Delhi!      With Love, Delhi!        2011   \n",
       "...          ...                    ...                    ...         ...   \n",
       "45752  tt0848228           The Avengers           The Avengers        2012   \n",
       "45753  tt1853728       Django Unchained       Django Unchained        2012   \n",
       "45754  tt0816692           Interstellar           Interstellar        2014   \n",
       "45755  tt1345836  The Dark Knight Rises  The Dark Knight Rises        2012   \n",
       "45756  tt1375666              Inception              Inception        2010   \n",
       "\n",
       "       runtime_minutes                       genres  averagerating  numvotes  \\\n",
       "0                 76.0                     [Comedy]            8.0        26   \n",
       "1                 70.0                   [Thriller]            3.7        26   \n",
       "2                120.0   [Comedy, Mystery, Romance]            8.1        26   \n",
       "3                 70.0                       [None]            7.2        26   \n",
       "4                 97.0                   [Thriller]            7.9        26   \n",
       "...                ...                          ...            ...       ...   \n",
       "45752            143.0  [Action, Adventure, Sci-Fi]            8.1   1183655   \n",
       "45753            165.0             [Drama, Western]            8.4   1211405   \n",
       "45754            169.0   [Adventure, Drama, Sci-Fi]            8.6   1299334   \n",
       "45755            164.0           [Action, Thriller]            8.4   1387769   \n",
       "45756            148.0  [Action, Adventure, Sci-Fi]            8.8   1841066   \n",
       "\n",
       "       Documentary  Drama  ...  Romance  Music  History  Family  Sport  \\\n",
       "0            False  False  ...    False  False    False   False  False   \n",
       "1            False  False  ...    False  False    False   False  False   \n",
       "2            False  False  ...     True  False    False   False  False   \n",
       "3            False  False  ...    False  False    False   False  False   \n",
       "4            False  False  ...    False  False    False   False  False   \n",
       "...            ...    ...  ...      ...    ...      ...     ...    ...   \n",
       "45752        False  False  ...    False  False    False   False  False   \n",
       "45753        False   True  ...    False  False    False   False  False   \n",
       "45754        False   True  ...    False  False    False   False  False   \n",
       "45755        False  False  ...    False  False    False   False  False   \n",
       "45756        False  False  ...    False  False    False   False  False   \n",
       "\n",
       "       Animation  Crime  Sci-Fi    War  Mystery  \n",
       "0          False  False   False  False    False  \n",
       "1          False  False   False  False    False  \n",
       "2          False  False   False  False     True  \n",
       "3          False  False   False  False    False  \n",
       "4          False  False   False  False    False  \n",
       "...          ...    ...     ...    ...      ...  \n",
       "45752      False  False    True  False    False  \n",
       "45753      False  False   False  False    False  \n",
       "45754      False  False    True  False    False  \n",
       "45755      False  False   False  False    False  \n",
       "45756      False  False    True  False    False  \n",
       "\n",
       "[45757 rows x 25 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>movie_id</th>\n",
       "      <th>primary_title</th>\n",
       "      <th>original_title</th>\n",
       "      <th>start_year</th>\n",
       "      <th>runtime_minutes</th>\n",
       "      <th>genres</th>\n",
       "      <th>averagerating</th>\n",
       "      <th>numvotes</th>\n",
       "      <th>Documentary</th>\n",
       "      <th>Drama</th>\n",
       "      <th>...</th>\n",
       "      <th>History</th>\n",
       "      <th>Family</th>\n",
       "      <th>Sport</th>\n",
       "      <th>Animation</th>\n",
       "      <th>Crime</th>\n",
       "      <th>Sci-Fi</th>\n",
       "      <th>War</th>\n",
       "      <th>Mystery</th>\n",
       "      <th>hours</th>\n",
       "      <th>minutes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tt1608246</td>\n",
       "      <td>Therapissed</td>\n",
       "      <td>Therapissed</td>\n",
       "      <td>2010</td>\n",
       "      <td>76.0</td>\n",
       "      <td>[Comedy]</td>\n",
       "      <td>8.0</td>\n",
       "      <td>26</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>1.266667</td>\n",
       "      <td>&lt;bound method Series.round of 0        16.0\\n1...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>tt6547822</td>\n",
       "      <td>Bloody Murder</td>\n",
       "      <td>Bloody Murder</td>\n",
       "      <td>2017</td>\n",
       "      <td>70.0</td>\n",
       "      <td>[Thriller]</td>\n",
       "      <td>3.7</td>\n",
       "      <td>26</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>1.166667</td>\n",
       "      <td>&lt;bound method Series.round of 0        16.0\\n1...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>tt7024660</td>\n",
       "      <td>Good Morning Pakistan</td>\n",
       "      <td>Salam Pakistan</td>\n",
       "      <td>2018</td>\n",
       "      <td>120.0</td>\n",
       "      <td>[Comedy, Mystery, Romance]</td>\n",
       "      <td>8.1</td>\n",
       "      <td>26</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>&lt;bound method Series.round of 0        16.0\\n1...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>tt7293844</td>\n",
       "      <td>Los Corroboradores</td>\n",
       "      <td>Los Corroboradores</td>\n",
       "      <td>2017</td>\n",
       "      <td>70.0</td>\n",
       "      <td>[None]</td>\n",
       "      <td>7.2</td>\n",
       "      <td>26</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>1.166667</td>\n",
       "      <td>&lt;bound method Series.round of 0        16.0\\n1...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>tt7460834</td>\n",
       "      <td>With Love, Delhi!</td>\n",
       "      <td>With Love, Delhi!</td>\n",
       "      <td>2011</td>\n",
       "      <td>97.0</td>\n",
       "      <td>[Thriller]</td>\n",
       "      <td>7.9</td>\n",
       "      <td>26</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>1.616667</td>\n",
       "      <td>&lt;bound method Series.round of 0        16.0\\n1...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45752</th>\n",
       "      <td>tt0848228</td>\n",
       "      <td>The Avengers</td>\n",
       "      <td>The Avengers</td>\n",
       "      <td>2012</td>\n",
       "      <td>143.0</td>\n",
       "      <td>[Action, Adventure, Sci-Fi]</td>\n",
       "      <td>8.1</td>\n",
       "      <td>1183655</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>2.383333</td>\n",
       "      <td>&lt;bound method Series.round of 0        16.0\\n1...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45753</th>\n",
       "      <td>tt1853728</td>\n",
       "      <td>Django Unchained</td>\n",
       "      <td>Django Unchained</td>\n",
       "      <td>2012</td>\n",
       "      <td>165.0</td>\n",
       "      <td>[Drama, Western]</td>\n",
       "      <td>8.4</td>\n",
       "      <td>1211405</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>2.750000</td>\n",
       "      <td>&lt;bound method Series.round of 0        16.0\\n1...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45754</th>\n",
       "      <td>tt0816692</td>\n",
       "      <td>Interstellar</td>\n",
       "      <td>Interstellar</td>\n",
       "      <td>2014</td>\n",
       "      <td>169.0</td>\n",
       "      <td>[Adventure, Drama, Sci-Fi]</td>\n",
       "      <td>8.6</td>\n",
       "      <td>1299334</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>2.816667</td>\n",
       "      <td>&lt;bound method Series.round of 0        16.0\\n1...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45755</th>\n",
       "      <td>tt1345836</td>\n",
       "      <td>The Dark Knight Rises</td>\n",
       "      <td>The Dark Knight Rises</td>\n",
       "      <td>2012</td>\n",
       "      <td>164.0</td>\n",
       "      <td>[Action, Thriller]</td>\n",
       "      <td>8.4</td>\n",
       "      <td>1387769</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>2.733333</td>\n",
       "      <td>&lt;bound method Series.round of 0        16.0\\n1...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45756</th>\n",
       "      <td>tt1375666</td>\n",
       "      <td>Inception</td>\n",
       "      <td>Inception</td>\n",
       "      <td>2010</td>\n",
       "      <td>148.0</td>\n",
       "      <td>[Action, Adventure, Sci-Fi]</td>\n",
       "      <td>8.8</td>\n",
       "      <td>1841066</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>2.466667</td>\n",
       "      <td>&lt;bound method Series.round of 0        16.0\\n1...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>45757 rows × 27 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        movie_id          primary_title         original_title  start_year  \\\n",
       "0      tt1608246            Therapissed            Therapissed        2010   \n",
       "1      tt6547822          Bloody Murder          Bloody Murder        2017   \n",
       "2      tt7024660  Good Morning Pakistan         Salam Pakistan        2018   \n",
       "3      tt7293844     Los Corroboradores     Los Corroboradores        2017   \n",
       "4      tt7460834      With Love, Delhi!      With Love, Delhi!        2011   \n",
       "...          ...                    ...                    ...         ...   \n",
       "45752  tt0848228           The Avengers           The Avengers        2012   \n",
       "45753  tt1853728       Django Unchained       Django Unchained        2012   \n",
       "45754  tt0816692           Interstellar           Interstellar        2014   \n",
       "45755  tt1345836  The Dark Knight Rises  The Dark Knight Rises        2012   \n",
       "45756  tt1375666              Inception              Inception        2010   \n",
       "\n",
       "       runtime_minutes                       genres  averagerating  numvotes  \\\n",
       "0                 76.0                     [Comedy]            8.0        26   \n",
       "1                 70.0                   [Thriller]            3.7        26   \n",
       "2                120.0   [Comedy, Mystery, Romance]            8.1        26   \n",
       "3                 70.0                       [None]            7.2        26   \n",
       "4                 97.0                   [Thriller]            7.9        26   \n",
       "...                ...                          ...            ...       ...   \n",
       "45752            143.0  [Action, Adventure, Sci-Fi]            8.1   1183655   \n",
       "45753            165.0             [Drama, Western]            8.4   1211405   \n",
       "45754            169.0   [Adventure, Drama, Sci-Fi]            8.6   1299334   \n",
       "45755            164.0           [Action, Thriller]            8.4   1387769   \n",
       "45756            148.0  [Action, Adventure, Sci-Fi]            8.8   1841066   \n",
       "\n",
       "       Documentary  Drama  ...  History  Family  Sport  Animation  Crime  \\\n",
       "0            False  False  ...    False   False  False      False  False   \n",
       "1            False  False  ...    False   False  False      False  False   \n",
       "2            False  False  ...    False   False  False      False  False   \n",
       "3            False  False  ...    False   False  False      False  False   \n",
       "4            False  False  ...    False   False  False      False  False   \n",
       "...            ...    ...  ...      ...     ...    ...        ...    ...   \n",
       "45752        False  False  ...    False   False  False      False  False   \n",
       "45753        False   True  ...    False   False  False      False  False   \n",
       "45754        False   True  ...    False   False  False      False  False   \n",
       "45755        False  False  ...    False   False  False      False  False   \n",
       "45756        False  False  ...    False   False  False      False  False   \n",
       "\n",
       "       Sci-Fi    War  Mystery     hours  \\\n",
       "0       False  False    False  1.266667   \n",
       "1       False  False    False  1.166667   \n",
       "2       False  False     True  2.000000   \n",
       "3       False  False    False  1.166667   \n",
       "4       False  False    False  1.616667   \n",
       "...       ...    ...      ...       ...   \n",
       "45752    True  False    False  2.383333   \n",
       "45753   False  False    False  2.750000   \n",
       "45754    True  False    False  2.816667   \n",
       "45755   False  False    False  2.733333   \n",
       "45756    True  False    False  2.466667   \n",
       "\n",
       "                                                 minutes  \n",
       "0      <bound method Series.round of 0        16.0\\n1...  \n",
       "1      <bound method Series.round of 0        16.0\\n1...  \n",
       "2      <bound method Series.round of 0        16.0\\n1...  \n",
       "3      <bound method Series.round of 0        16.0\\n1...  \n",
       "4      <bound method Series.round of 0        16.0\\n1...  \n",
       "...                                                  ...  \n",
       "45752  <bound method Series.round of 0        16.0\\n1...  \n",
       "45753  <bound method Series.round of 0        16.0\\n1...  \n",
       "45754  <bound method Series.round of 0        16.0\\n1...  \n",
       "45755  <bound method Series.round of 0        16.0\\n1...  \n",
       "45756  <bound method Series.round of 0        16.0\\n1...  \n",
       "\n",
       "[45757 rows x 27 columns]"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_null_runtimedropped=df\n",
    "df_null_runtimedropped.dropna(subset=['runtime_minutes'],inplace=True)\n",
    "df_null_runtimedropped"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 35,
=======
   "execution_count": 14,
>>>>>>> c82a862c06400c6b477c7baafa2d1550413e4ac8
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "movie_id           False\n",
       "primary_title      False\n",
       "original_title     False\n",
       "start_year         False\n",
       "runtime_minutes    False\n",
       "genres             False\n",
       "averagerating      False\n",
       "numvotes           False\n",
<<<<<<< HEAD
       "Documentary        False\n",
       "Drama              False\n",
       "Comedy             False\n",
       "Horror             False\n",
       "Thriller           False\n",
       "Action             False\n",
       "Bigoraphy          False\n",
       "Romance            False\n",
       "Music              False\n",
       "History            False\n",
       "Family             False\n",
       "Sport              False\n",
       "Animation          False\n",
       "Crime              False\n",
       "Sci-Fi             False\n",
       "War                False\n",
       "Mystery            False\n",
       "hours              False\n",
       "minutes            False\n",
       "dtype: bool"
      ]
     },
     "execution_count": 35,
=======
       "dtype: bool"
      ]
     },
     "execution_count": 14,
>>>>>>> c82a862c06400c6b477c7baafa2d1550413e4ac8
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
<<<<<<< HEAD
    "df_null_runtimedropped.isna().any()"
=======
    "df['genres'] = df['genres'].fillna(value='None')\n",
    "df['original_title'] = df['original_title'].fillna(value=df['primary_title'])\n",
    "df.isna().any()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Other checks on data "
>>>>>>> c82a862c06400c6b477c7baafa2d1550413e4ac8
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 9,
=======
   "execution_count": 15,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "90.0     1824\n",
       "100.0     995\n",
       "95.0      933\n",
       "85.0      824\n",
       "93.0      745\n",
       "         ... \n",
       "272.0       1\n",
       "184.0       1\n",
       "29.0        1\n",
       "42.0        1\n",
       "226.0       1\n",
       "Name: runtime_minutes, Length: 198, dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "df[\"genres\"].value_counts()\n",
    "df[\"original_title\"].value_counts()\n",
    "df[\"primary_title\"].value_counts()\n",
    "df[\"runtime_minutes\"].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Check directors for null"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "movie_id       False\n",
       "movie_num      False\n",
       "director_id    False\n",
       "avg_rating     False\n",
       "name           False\n",
       "dtype: bool"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "df_directors.isna().any()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since movies can have multiple genres and they are listed as string , we must manipulate genres into boolean values and create a column for each Genre, in order to do this we must put genres into an array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "g=[]\n",
    "j=[]\n",
    "count=0\n",
    "for i in df['genres']:\n",
    "    j=i.split(',')\n",
    "    g.append(j)\n",
    "df['genres']=g"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next put the values into the new columns within the dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "genres_list=['Documentary', 'Drama','Comedy','Horror','Thriller','Action','Bigoraphy','Romance' ,'Music','History','Family','Sport','Animation','Crime','Sci-Fi','War','Mystery','Western']\n",
    "\n",
    "for gl in genres_list:\n",
    "    g2=[]\n",
    "    for g3 in df['genres']:\n",
    "        if gl in g3:\n",
    "            g2.append(True)\n",
    "        else:\n",
    "            g2.append(False)\n",
    "    df[gl]=g2\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Check table\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>movie_id</th>\n",
       "      <th>movie_num</th>\n",
       "      <th>director_id</th>\n",
       "      <th>avg_rating</th>\n",
       "      <th>name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tt6588024</td>\n",
       "      <td>217</td>\n",
       "      <td>nm6935209</td>\n",
       "      <td>5</td>\n",
       "      <td>Tony Newton</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>tt7583042</td>\n",
       "      <td>180</td>\n",
       "      <td>nm2563700</td>\n",
       "      <td>5</td>\n",
       "      <td>Jason Impey</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>tt4050462</td>\n",
       "      <td>177</td>\n",
       "      <td>nm1546474</td>\n",
       "      <td>5</td>\n",
       "      <td>Shane Ryan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>tt4050462</td>\n",
       "      <td>150</td>\n",
       "      <td>nm3877467</td>\n",
       "      <td>5</td>\n",
       "      <td>Ruben Rodriguez</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>tt3334746</td>\n",
       "      <td>135</td>\n",
       "      <td>nm6078996</td>\n",
       "      <td>5</td>\n",
       "      <td>Martin Sonntag</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2497</th>\n",
       "      <td>tt1399103</td>\n",
       "      <td>11</td>\n",
       "      <td>nm0000881</td>\n",
       "      <td>6</td>\n",
       "      <td>Michael Bay</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2498</th>\n",
       "      <td>tt1234654</td>\n",
       "      <td>11</td>\n",
       "      <td>nm0000876</td>\n",
       "      <td>6</td>\n",
       "      <td>Noah Baumbach</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2499</th>\n",
       "      <td>tt4459156</td>\n",
       "      <td>11</td>\n",
       "      <td>nm0000806</td>\n",
       "      <td>6</td>\n",
       "      <td>Bille August</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2500</th>\n",
       "      <td>tt2406252</td>\n",
       "      <td>11</td>\n",
       "      <td>nm0000591</td>\n",
       "      <td>6</td>\n",
       "      <td>Roman Polanski</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2501</th>\n",
       "      <td>tt1124035</td>\n",
       "      <td>11</td>\n",
       "      <td>nm0000123</td>\n",
       "      <td>6</td>\n",
       "      <td>George Clooney</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2502 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       movie_id  movie_num director_id  avg_rating             name\n",
       "0     tt6588024        217   nm6935209           5      Tony Newton\n",
       "1     tt7583042        180   nm2563700           5      Jason Impey\n",
       "2     tt4050462        177   nm1546474           5       Shane Ryan\n",
       "3     tt4050462        150   nm3877467           5  Ruben Rodriguez\n",
       "4     tt3334746        135   nm6078996           5   Martin Sonntag\n",
       "...         ...        ...         ...         ...              ...\n",
       "2497  tt1399103         11   nm0000881           6      Michael Bay\n",
       "2498  tt1234654         11   nm0000876           6    Noah Baumbach\n",
       "2499  tt4459156         11   nm0000806           6     Bille August\n",
       "2500  tt2406252         11   nm0000591           6   Roman Polanski\n",
       "2501  tt1124035         11   nm0000123           6   George Clooney\n",
       "\n",
       "[2502 rows x 5 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_directors"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create another table for the genres where they are listed multiple times for consistency with other csv data analysis and consistency with other notebooks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
>>>>>>> c82a862c06400c6b477c7baafa2d1550413e4ac8
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>movie_ids</th>\n",
       "      <th>genres</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tt0063540</td>\n",
       "      <td>Action</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>tt0063540</td>\n",
       "      <td>Crime</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>tt0063540</td>\n",
       "      <td>Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>tt0066787</td>\n",
       "      <td>Biography</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>tt0066787</td>\n",
       "      <td>Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>234953</th>\n",
       "      <td>tt9916538</td>\n",
       "      <td>Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>234954</th>\n",
       "      <td>tt9916622</td>\n",
       "      <td>Documentary</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>234955</th>\n",
       "      <td>tt9916706</td>\n",
       "      <td>Comedy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>234956</th>\n",
       "      <td>tt9916730</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>234957</th>\n",
       "      <td>tt9916754</td>\n",
       "      <td>Documentary</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>234958 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        movie_ids       genres\n",
       "0       tt0063540       Action\n",
       "1       tt0063540        Crime\n",
       "2       tt0063540        Drama\n",
       "3       tt0066787    Biography\n",
       "4       tt0066787        Drama\n",
       "...           ...          ...\n",
       "234953  tt9916538        Drama\n",
       "234954  tt9916622  Documentary\n",
       "234955  tt9916706       Comedy\n",
       "234956  tt9916730         None\n",
       "234957  tt9916754  Documentary\n",
       "\n",
       "[234958 rows x 2 columns]"
      ]
     },
<<<<<<< HEAD
     "execution_count": 9,
=======
     "execution_count": 20,
>>>>>>> c82a862c06400c6b477c7baafa2d1550413e4ac8
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "genre_table=pd.read_sql('Select genres,movie_id from movie_basics', conn)\n",
    "genre_table['genres'] = genre_table['genres'].fillna(value='None')\n",
    "g=[]\n",
    "j=[]\n",
    "count=0\n",
    "for i in genre_table['genres']:\n",
    "    j=i.split(',')\n",
    "    g.append(j)\n",
    "genre_table['genres']=g\n",
    "ids = []\n",
    "genre = []\n",
    "vote_averages = []\n",
<<<<<<< HEAD
    "temp = {'movie_ids': ids, 'genres': genre}\n",
=======
    "temp_genres = {'movie_ids': ids, 'genres': genre}\n",
>>>>>>> c82a862c06400c6b477c7baafa2d1550413e4ac8
    "\n",
    "for index, row in genre_table.iterrows():\n",
    "    for gen in row[0]:\n",
    "        ids.append(row[1])\n",
    "        genre.append(gen)\n",
    "        \n",
    "\n",
<<<<<<< HEAD
    "genres_frame = pd.DataFrame(temp)\n",
=======
    "genres_frame = pd.DataFrame(temp_genres)\n",
>>>>>>> c82a862c06400c6b477c7baafa2d1550413e4ac8
    "genres_frame"
   ]
  },
  {
<<<<<<< HEAD
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.05583845094739603"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "#other option is drop it\n",
    "df.dropna(subset=['runtime_minutes'],inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "#replace original titles that are na with primary title\n",
    "df['original_title'] = df['original_title'].fillna(value=df['primary_title'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "#replace na genres with none\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "90.0       3085\n",
       "0.0        2555\n",
       "100.0      1458\n",
       "95.0       1404\n",
       "85.0       1346\n",
       "           ... \n",
       "11.0          1\n",
       "467.0         1\n",
       "14400.0       1\n",
       "1440.0        1\n",
       "231.0         1\n",
       "Name: runtime_minutes, Length: 245, dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#check to see values are okay\n",
    "df[\"genres\"].value_counts()\n",
    "df[\"original_title\"].value_counts()\n",
    "df[\"primary_title\"].value_counts()\n",
    "df[\"runtime_minutes\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>movie_id</th>\n",
       "      <th>ordering</th>\n",
       "      <th>title</th>\n",
       "      <th>region</th>\n",
       "      <th>language</th>\n",
       "      <th>types</th>\n",
       "      <th>attributes</th>\n",
       "      <th>is_original_title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tt0369610</td>\n",
       "      <td>10</td>\n",
       "      <td>Джурасик свят</td>\n",
       "      <td>BG</td>\n",
       "      <td>bg</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>tt0369610</td>\n",
       "      <td>11</td>\n",
       "      <td>Jurashikku warudo</td>\n",
       "      <td>JP</td>\n",
       "      <td>None</td>\n",
       "      <td>imdbDisplay</td>\n",
       "      <td>None</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>tt0369610</td>\n",
       "      <td>12</td>\n",
       "      <td>Jurassic World: O Mundo dos Dinossauros</td>\n",
       "      <td>BR</td>\n",
       "      <td>None</td>\n",
       "      <td>imdbDisplay</td>\n",
       "      <td>None</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>tt0369610</td>\n",
       "      <td>13</td>\n",
       "      <td>O Mundo dos Dinossauros</td>\n",
       "      <td>BR</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>short title</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>tt0369610</td>\n",
       "      <td>14</td>\n",
       "      <td>Jurassic World</td>\n",
       "      <td>FR</td>\n",
       "      <td>None</td>\n",
       "      <td>imdbDisplay</td>\n",
       "      <td>None</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>331698</th>\n",
       "      <td>tt9827784</td>\n",
       "      <td>2</td>\n",
       "      <td>Sayonara kuchibiru</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>original</td>\n",
       "      <td>None</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>331699</th>\n",
       "      <td>tt9827784</td>\n",
       "      <td>3</td>\n",
       "      <td>Farewell Song</td>\n",
       "      <td>XWW</td>\n",
       "      <td>en</td>\n",
       "      <td>imdbDisplay</td>\n",
       "      <td>None</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>331700</th>\n",
       "      <td>tt9880178</td>\n",
       "      <td>1</td>\n",
       "      <td>La atención</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>original</td>\n",
       "      <td>None</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>331701</th>\n",
       "      <td>tt9880178</td>\n",
       "      <td>2</td>\n",
       "      <td>La atención</td>\n",
       "      <td>ES</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>331702</th>\n",
       "      <td>tt9880178</td>\n",
       "      <td>3</td>\n",
       "      <td>The Attention</td>\n",
       "      <td>XWW</td>\n",
       "      <td>en</td>\n",
       "      <td>imdbDisplay</td>\n",
       "      <td>None</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>331703 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         movie_id  ordering                                    title region  \\\n",
       "0       tt0369610        10                            Джурасик свят     BG   \n",
       "1       tt0369610        11                        Jurashikku warudo     JP   \n",
       "2       tt0369610        12  Jurassic World: O Mundo dos Dinossauros     BR   \n",
       "3       tt0369610        13                  O Mundo dos Dinossauros     BR   \n",
       "4       tt0369610        14                           Jurassic World     FR   \n",
       "...           ...       ...                                      ...    ...   \n",
       "331698  tt9827784         2                       Sayonara kuchibiru   None   \n",
       "331699  tt9827784         3                            Farewell Song    XWW   \n",
       "331700  tt9880178         1                              La atención   None   \n",
       "331701  tt9880178         2                              La atención     ES   \n",
       "331702  tt9880178         3                            The Attention    XWW   \n",
       "\n",
       "       language        types   attributes  is_original_title  \n",
       "0            bg         None         None                0.0  \n",
       "1          None  imdbDisplay         None                0.0  \n",
       "2          None  imdbDisplay         None                0.0  \n",
       "3          None         None  short title                0.0  \n",
       "4          None  imdbDisplay         None                0.0  \n",
       "...         ...          ...          ...                ...  \n",
       "331698     None     original         None                1.0  \n",
       "331699       en  imdbDisplay         None                0.0  \n",
       "331700     None     original         None                1.0  \n",
       "331701     None         None         None                0.0  \n",
       "331702       en  imdbDisplay         None                0.0  \n",
       "\n",
       "[331703 rows x 8 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movie_akas=pd.read_sql('Select * from movie_akas', conn)\n",
    "movie_akas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "new title                      1700\n",
       "alternative spelling           1394\n",
       "literal English title          1054\n",
       "complete title                 1034\n",
       "original subtitled version      879\n",
       "                               ... \n",
       "X-rated version                   1\n",
       "TV listings title                 1\n",
       "8mm release title                 1\n",
       "reissue title\u0002short version       1\n",
       "first season title                1\n",
       "Name: attributes, Length: 77, dtype: int64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movie_akas[\"attributes\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "movie_id             False\n",
       "ordering             False\n",
       "title                False\n",
       "region                True\n",
       "language              True\n",
       "types                 True\n",
       "attributes            True\n",
       "is_original_title     True\n",
       "dtype: bool"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movie_akas.isna().any()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.87423990738703"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(movie_akas[movie_akas.language.isna()])/ len(movie_akas)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.16066481159350382"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(movie_akas[movie_akas.region.isna()])/ len(movie_akas)"
=======
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Visualizations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
<<<<<<< HEAD
    "We have 2 already so now we will make one with directors vs rating"
>>>>>>> c82a862c06400c6b477c7baafa2d1550413e4ac8
=======
    "Other notebooks have genre visualization so now we will make one with directors vs rating"
>>>>>>> 9bb15ab84deefc8ce6743b9340e059be531204a4
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
<<<<<<< HEAD
   "metadata": {},
<<<<<<< HEAD
   "outputs": [],
   "source": [
    "movie_akas['language'] = movie_akas['language'].fillna(value=movie_akas['region'])"
=======
=======
   "metadata": {
    "scrolled": true
   },
>>>>>>> 9bb15ab84deefc8ce6743b9340e059be531204a4
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 2160x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
<<<<<<< HEAD
    "plt.figure(figsize=(30,5))\n"
>>>>>>> c82a862c06400c6b477c7baafa2d1550413e4ac8
=======
    "fig,ax=plt.subplots(figsize=(30,10))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Scatterplot to see if runtime minutes effects average rating"
>>>>>>> 9bb15ab84deefc8ce6743b9340e059be531204a4
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
<<<<<<< HEAD
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Count(*)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>146144</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Count(*)\n",
       "0    146144"
=======
      "text/plain": [
       "<AxesSubplot:xlabel='runtime_minutes', ylabel='averagerating'>"
>>>>>>> c82a862c06400c6b477c7baafa2d1550413e4ac8
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
<<<<<<< HEAD
    }
   ],
   "source": [
    "pd.read_sql('Select Count(*)  from movie_basics', conn)"
=======
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.scatterplot(data=df, x='runtime_minutes', y='averagerating')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
<<<<<<< HEAD
    "Visualization from larger dataset for directors"
>>>>>>> c82a862c06400c6b477c7baafa2d1550413e4ac8
=======
    "See what the average rating is to see if we want to add a mean line to visualization"
>>>>>>> 9bb15ab84deefc8ce6743b9340e059be531204a4
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
<<<<<<< HEAD
   "outputs": [],
   "source": [
    "#Anything below This is stuff that we probably will not use more exploratory purposes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AVG(runtime_minutes)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>86.187247</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   AVG(runtime_minutes)\n",
       "0             86.187247"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#replace none with average\n",
    "pd.read_sql('Select AVG(runtime_minutes)  from movie_basics', conn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>movie_id</th>\n",
       "      <th>averagerating</th>\n",
       "      <th>numvotes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tt10356526</td>\n",
       "      <td>8.3</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>tt10384606</td>\n",
       "      <td>8.9</td>\n",
       "      <td>559</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>tt1042974</td>\n",
       "      <td>6.4</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>tt1043726</td>\n",
       "      <td>4.2</td>\n",
       "      <td>50352</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>tt1060240</td>\n",
       "      <td>6.5</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73851</th>\n",
       "      <td>tt9805820</td>\n",
       "      <td>8.1</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73852</th>\n",
       "      <td>tt9844256</td>\n",
       "      <td>7.5</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73853</th>\n",
       "      <td>tt9851050</td>\n",
       "      <td>4.7</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73854</th>\n",
       "      <td>tt9886934</td>\n",
       "      <td>7.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73855</th>\n",
       "      <td>tt9894098</td>\n",
       "      <td>6.3</td>\n",
       "      <td>128</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>73856 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         movie_id  averagerating  numvotes\n",
       "0      tt10356526            8.3        31\n",
       "1      tt10384606            8.9       559\n",
       "2       tt1042974            6.4        20\n",
       "3       tt1043726            4.2     50352\n",
       "4       tt1060240            6.5        21\n",
       "...           ...            ...       ...\n",
       "73851   tt9805820            8.1        25\n",
       "73852   tt9844256            7.5        24\n",
       "73853   tt9851050            4.7        14\n",
       "73854   tt9886934            7.0         5\n",
       "73855   tt9894098            6.3       128\n",
       "\n",
       "[73856 rows x 3 columns]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.read_sql('Select * from movie_ratings', conn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Count(*)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>73856</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Count(*)\n",
       "0     73856"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.read_sql('Select Count(*)  from movie_ratings', conn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Count(*)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2699</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Count(*)\n",
       "0      2699"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.read_sql('Select Count(*)  from movie_ratings Where numvotes<6', conn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Count(*)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5574</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Count(*)\n",
       "0      5574"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.read_sql('Select Count(*)  from movie_ratings Where numvotes<7', conn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AVG(numvotes)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3523.662167</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   AVG(numvotes)\n",
       "0    3523.662167"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.read_sql('Select AVG(numvotes)  from movie_ratings ', conn)"
=======
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5.450439648281375"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_directors['avg_rating'].mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create visualization for average rating and the number of directors who have that rating to understand the distribution of ratings"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_directors['avg_rating'].mean()"
>>>>>>> c82a862c06400c6b477c7baafa2d1550413e4ac8
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
=======
   "execution_count": 24,
>>>>>>> 9bb15ab84deefc8ce6743b9340e059be531204a4
   "metadata": {},
   "outputs": [
    {
     "data": {
<<<<<<< HEAD
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Count(*)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>64239</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Count(*)\n",
       "0     64239"
=======
      "text/plain": [
       "[Text(0.5, 0, 'Average rating'),\n",
       " Text(0, 0.5, 'Number of Directors'),\n",
       " Text(0.5, 1.0, 'Average rating distribution')]"
>>>>>>> c82a862c06400c6b477c7baafa2d1550413e4ac8
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
<<<<<<< HEAD
    }
   ],
   "source": [
    "pd.read_sql('Select Count(*)  from movie_ratings Where numvotes<1000', conn)"
=======
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x648 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set_context('talk')\n",
    "fig,ax=plt.subplots(figsize=(14,9))\n",
    "countplot=sns.countplot(\n",
    "    data=df_directors,  \n",
    "    x='avg_rating',\n",
    "    order=[1,2,3,4,5,6,7,8,9],\n",
    "    palette='mako_r'\n",
    "    )\n",
    "plt.ylim(0,800)\n",
    "countplot.set(xlabel = \"Average rating\", ylabel='Number of Directors', title='Average rating distribution')\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
<<<<<<< HEAD
    "Visualization for smaller data set of top directors"
>>>>>>> c82a862c06400c6b477c7baafa2d1550413e4ac8
=======
    "Visualization for smaller data set of top directors to see who the top directors are and what their ratings are"
>>>>>>> 9bb15ab84deefc8ce6743b9340e059be531204a4
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
<<<<<<< HEAD
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>movie_id</th>\n",
       "      <th>ordering</th>\n",
       "      <th>person_id</th>\n",
       "      <th>category</th>\n",
       "      <th>job</th>\n",
       "      <th>characters</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tt0111414</td>\n",
       "      <td>1</td>\n",
       "      <td>nm0246005</td>\n",
       "      <td>actor</td>\n",
       "      <td>None</td>\n",
       "      <td>[\"The Man\"]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>tt0111414</td>\n",
       "      <td>2</td>\n",
       "      <td>nm0398271</td>\n",
       "      <td>director</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>tt0111414</td>\n",
       "      <td>3</td>\n",
       "      <td>nm3739909</td>\n",
       "      <td>producer</td>\n",
       "      <td>producer</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>tt0323808</td>\n",
       "      <td>10</td>\n",
       "      <td>nm0059247</td>\n",
       "      <td>editor</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>tt0323808</td>\n",
       "      <td>1</td>\n",
       "      <td>nm3579312</td>\n",
       "      <td>actress</td>\n",
       "      <td>None</td>\n",
       "      <td>[\"Beth Boothby\"]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1028181</th>\n",
       "      <td>tt9692684</td>\n",
       "      <td>1</td>\n",
       "      <td>nm0186469</td>\n",
       "      <td>actor</td>\n",
       "      <td>None</td>\n",
       "      <td>[\"Ebenezer Scrooge\"]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1028182</th>\n",
       "      <td>tt9692684</td>\n",
       "      <td>2</td>\n",
       "      <td>nm4929530</td>\n",
       "      <td>self</td>\n",
       "      <td>None</td>\n",
       "      <td>[\"Herself\",\"Regan\"]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1028183</th>\n",
       "      <td>tt9692684</td>\n",
       "      <td>3</td>\n",
       "      <td>nm10441594</td>\n",
       "      <td>director</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1028184</th>\n",
       "      <td>tt9692684</td>\n",
       "      <td>4</td>\n",
       "      <td>nm6009913</td>\n",
       "      <td>writer</td>\n",
       "      <td>writer</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1028185</th>\n",
       "      <td>tt9692684</td>\n",
       "      <td>5</td>\n",
       "      <td>nm10441595</td>\n",
       "      <td>producer</td>\n",
       "      <td>producer</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1028186 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          movie_id  ordering   person_id  category       job  \\\n",
       "0        tt0111414         1   nm0246005     actor      None   \n",
       "1        tt0111414         2   nm0398271  director      None   \n",
       "2        tt0111414         3   nm3739909  producer  producer   \n",
       "3        tt0323808        10   nm0059247    editor      None   \n",
       "4        tt0323808         1   nm3579312   actress      None   \n",
       "...            ...       ...         ...       ...       ...   \n",
       "1028181  tt9692684         1   nm0186469     actor      None   \n",
       "1028182  tt9692684         2   nm4929530      self      None   \n",
       "1028183  tt9692684         3  nm10441594  director      None   \n",
       "1028184  tt9692684         4   nm6009913    writer    writer   \n",
       "1028185  tt9692684         5  nm10441595  producer  producer   \n",
       "\n",
       "                   characters  \n",
       "0                 [\"The Man\"]  \n",
       "1                        None  \n",
       "2                        None  \n",
       "3                        None  \n",
       "4            [\"Beth Boothby\"]  \n",
       "...                       ...  \n",
       "1028181  [\"Ebenezer Scrooge\"]  \n",
       "1028182   [\"Herself\",\"Regan\"]  \n",
       "1028183                  None  \n",
       "1028184                  None  \n",
       "1028185                  None  \n",
       "\n",
       "[1028186 rows x 6 columns]"
=======
      "text/plain": [
       "[Text(0.5, 0, 'Director'),\n",
       " Text(0, 0.5, 'Ratings'),\n",
       " Text(0.5, 1.0, 'Top Directors')]"
>>>>>>> c82a862c06400c6b477c7baafa2d1550413e4ac8
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
<<<<<<< HEAD
    }
   ],
   "source": [
    "pd.read_sql('Select * from principals', conn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "#conn.close()"
=======
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1008x648 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,ax=plt.subplots(figsize=(14,9))\n",
    "barplot=sns.barplot(\n",
    "    data=df_directors2, \n",
    "    y='name', \n",
    "    x='avg_rating',\n",
    "    palette='mako_r'\n",
    "    )\n",
    "plt.xlim(8,9.2 )\n",
    "sns.set_context('talk')\n",
    "barplot.set(xlabel = \"Director\", ylabel='Ratings', title='Top Directors')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Another visual but no title this time because it is for powerpoint"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Text(0, 0.5, 'Director'), Text(0.5, 0, 'Ratings')]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x648 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,ax=plt.subplots(figsize=(14,9))\n",
    "barplot=sns.barplot(\n",
    "    data=df_directors2, \n",
    "    y='name', \n",
    "    x='avg_rating',\n",
    "    palette='mako_r'\n",
    "    )\n",
    "plt.xlim(8,9.2 )\n",
    "barplot.set(ylabel = \"Director\", xlabel='Ratings')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Larger dataset visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='director_id', ylabel='avg_rating'>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x=df_directors['director_id']\n",
    "y=df_directors['avg_rating']\n",
    "sns.barplot(\n",
    "    data=df_directors, \n",
    "    x='director_id', \n",
    "    y='avg_rating'\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Analysis Complete"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Close connection"
>>>>>>> c82a862c06400c6b477c7baafa2d1550413e4ac8
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
<<<<<<< HEAD
   "source": []
=======
   "source": [
    "conn.close()"
   ]
>>>>>>> c82a862c06400c6b477c7baafa2d1550413e4ac8
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python (learn-env)",
   "language": "python",
   "name": "learn-env"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
